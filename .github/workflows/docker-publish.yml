name: Docker

on:
  workflow_dispatch:
  push:
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Nix
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image using Nix flake
      - name: Build Docker image with Nix
        run: nix build .#docker --out-link ./docker-result

        # Extract the tar file
      - name: Extract Docker Image
        run: |
          mkdir -p ./docker-image
          tar -xf ./docker-result -C ./docker-image

      - name: Inspect Docker Result
        run: |
          ls -la ./docker-result
          ls -la ./docker-image
          ls -l ./docker-image/docker-result

      # Log into the Docker registry
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Push the built Docker image to the registry
      - name: Push Docker image
        run: |
          REGISTRY=$(echo "${{ env.REGISTRY }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          skopeo copy oci:./docker-image/docker-result docker://${REGISTRY}/${IMAGE_NAME}:latest
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME}}
          REGISTRY: ${{ env.REGISTRY}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Sign the resulting Docker image digest
      - name: Sign the published Docker image
        env:
          TAGS: ${{ env.IMAGE_NAME}}
        run: |
          REGISTRY=$(echo "${{ env.REGISTRY }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          DIGEST=$(skopeo inspect docker://${REGISTRY}/${IMAGE_NAME}:latest --format "{{.Digest}}")
          echo "${IMAGE_NAME}" | xargs -I {} cosign sign --yes {}@${DIGEST}
